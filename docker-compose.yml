version: '3.4'

networks:
    network:

volumes:
    elastic-data: #for ES data persistency
    suricata-rules: #for suricata rules transfer between scirius and suricata and for persistency
    suricata-run: #path where the suricata socket resides
    suricata-logs:
    suricata-logrotate:
        driver_opts:
            type: none
            o: bind
            device: ${PWD}/containers-data/suricata/logrotate
    logstash-sincedb: #where logstash stores it's state so it doesn't re-ingest
    arkime-logs:
    arkime-pcap:
    arkime-config:
    db-data:

services:
    elasticsearch:
        container_name: elasticsearch
        image: elastic/elasticsearch:${ELK_VERSION:-7.17.20}
        restart: ${RESTART_MODE:-unless-stopped}
        healthcheck:
            test: ['CMD-SHELL', 'curl --silent --fail localhost:9200/_cluster/health || exit 1']
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 30s
        environment:
            - discovery.type=single-node
            - xpack.security.enabled=false
            - xpack.ml.enabled=${ML_ENABLED:-true}
            - ingest.geoip.downloader.enabled=false
        volumes:
            - ${ELASTIC_DATAPATH:-elastic-data}:/usr/share/elasticsearch/data
        mem_limit: ${ELASTIC_MEMORY:-3G}
        ulimits:
            memlock:
                soft: -1
                hard: -1
        networks:
            network:
        ports:
            - "9200:9200"

    kibana:
        container_name: kibana
        image: elastic/kibana:${ELK_VERSION:-7.17.20}
        restart: ${RESTART_MODE:-unless-stopped}
        healthcheck:
            test: ['CMD-SHELL', 'curl --silent --fail localhost:5601 || exit 1']
            interval: 30s
            timeout: 5s
            retries: 3
            start_period: 30s
        depends_on:
            elasticsearch:
                condition: service_healthy
        networks:
            network:
        ports:
            - "5601:5601"

    logstash:
        container_name: logstash
        image: elastic/logstash:${ELK_VERSION:-7.17.20}
        restart: ${RESTART_MODE:-unless-stopped}
        healthcheck:
            test: ['CMD-SHELL', 'curl --silent --fail localhost:9600 || exit 1']
            interval: 30s
            timeout: 5s
            retries: 3
            start_period: 30s
        mem_limit: ${LOGSTASH_MEMORY:-2G}
        volumes:
            - logstash-sincedb:/since.db
            - ${PWD}/containers-data/suricata/logs:/var/log/suricata:ro
            - ${PWD}/containers-data/logstash/conf.d/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
            - ${PWD}/containers-data/logstash/templates/elasticsearch7-template.json:/usr/share/logstash/config/elasticsearch7-template.json
        networks:
            network:
        

    suricata:
        container_name: suricata
        image: jasonish/suricata:master-amd64
        entrypoint: /etc/suricata/new_entrypoint.sh
        restart: ${RESTART_MODE:-unless-stopped}
        environment:
            - SURICATA_OPTIONS=${INTERFACES} -vvv --set sensor-name=suricata
        cap_add:
            - NET_ADMIN
            - SYS_NICE
        network_mode: host
        volumes:
            - ${PWD}/containers-data/suricata/logs:/var/log/suricata
            - suricata-rules:/etc/suricata/rules
            - suricata-run:/var/run/suricata/
            - ${PWD}/containers-data/suricata/etc:/etc/suricata
            - suricata-logrotate:/etc/logrotate.d/

    cron:
        # This containers handles crontabs for the other containers, following the 1 task per container principle.
        # It is based on  `docker:latest` image, wich is an alpine image with docker binary
        container_name: cron
        image: docker:latest
        healthcheck:
            test: ['CMD', 'ps', '|', 'grep', 'crond']
            interval: 1m
            timeout: 1m
            retries: 3
        command:
            [
                sh,
                -c,
                "echo '*	*	 *	*	 *	run-parts /etc/periodic/1min' >> /etc/crontabs/root && crond -f -l 8",
            ]
        restart: ${RESTART_MODE:-unless-stopped}
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock # This bind-mount allows using the hosts docker deamon instead of created one inside the container

            # Those volumes will contain the cron jobs
            - ${PWD}/containers-data/cron-jobs/1min:/etc/periodic/1min/:ro
            - ${PWD}/containers-data/cron-jobs/15min:/etc/periodic/15min/:ro
            - ${PWD}/containers-data/cron-jobs/daily:/etc/periodic/daily/:ro
            - ${PWD}/containers-data/cron-jobs/hourly:/etc/periodic/hourly/:ro
            - ${PWD}/containers-data/cron-jobs/monthly:/etc/periodic/monthly/:ro
            - ${PWD}/containers-data/cron-jobs/weekly:/etc/periodic/weekly/:ro

    arkime:
        container_name: arkime
        build:
          context: ./arkime
          dockerfile: arkime_custom.Dockerfile
        image: custom-arkime:latest
        restart: ${RESTART_MODE:-no}
        depends_on:
            elasticsearch:
                condition: service_healthy
        # might need new custom healthcheck here
        volumes:
            - ${PWD}/containers-data/suricata/logs:/suricata-logs:ro
            - ${PWD}/containers-data/arkime/logs:/opt/arkime/logs
            - arkime-pcap:/opt/arkime/raw
        ports:
            - 8005:8005
        networks:
            network:
